<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Brick Breaker</title>
    <style>
        body, canvas { margin: 0; overflow: hidden; display: flex; justify-content: center; align-items: center; height: 100vh; }
        canvas { background: black; }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let paddle = { x: canvas.width / 2 - 50, y: canvas.height - 30, width: 100, height: 10 };
        let ball = { x: canvas.width / 2, y: canvas.height - 50, radius: 10, dx: 3, dy: -3 };
        let bricks = [];

        for (let i = 0; i < 5; i++) {
            for (let j = 0; j < 10; j++) {
                bricks.push({ x: j * 70 + 20, y: i * 30 + 20, width: 60, height: 20, visible: true });
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw paddle
            ctx.fillStyle = "white";
            ctx.fillRect(paddle.x, paddle.y, paddle.width, paddle.height);

            // Draw ball
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
            ctx.fillStyle = "red";
            ctx.fill();

            // Draw bricks
            bricks.forEach(brick => {
                if (brick.visible) {
                    ctx.fillStyle = "blue";
                    ctx.fillRect(brick.x, brick.y, brick.width, brick.height);
                }
            });

            // Ball movement
            ball.x += ball.dx;
            ball.y += ball.dy;

            // Ball collision
            if (ball.x < 0 || ball.x > canvas.width) ball.dx *= -1;
            if (ball.y < 0) ball.dy *= -1;
            if (ball.y > canvas.height) resetGame();

            // Paddle collision
            if (ball.y + ball.radius >= paddle.y &&
                ball.x > paddle.x &&
                ball.x < paddle.x + paddle.width) {
                ball.dy *= -1;
            }

            // Brick collision
            bricks.forEach(brick => {
                if (brick.visible &&
                    ball.x > brick.x && ball.x < brick.x + brick.width &&
                    ball.y - ball.radius > brick.y && ball.y - ball.radius < brick.y + brick.height) {
                    brick.visible = false;
                    ball.dy *= -1;
                }
            });

            requestAnimationFrame(draw);
        }

        function resetGame() {
            ball.x = canvas.width / 2;
            ball.y = canvas.height - 50;
            ball.dx = 3;
            ball.dy = -3;
            bricks.forEach(b => b.visible = true);
        }

        // Move paddle
        document.addEventListener("mousemove", (e) => {
            let rect = canvas.getBoundingClientRect();
            paddle.x = e.clientX - rect.left - paddle.width / 2;
        });

        draw();
    </script>
</body>
</html>

